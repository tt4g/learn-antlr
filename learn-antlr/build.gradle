plugins {
    id "java-library"

    id "antlr"

    id "com.github.spotbugs"
}

apply(from: rootProject.file("gradle/versions.gradle"))
apply(from: rootProject.file("gradle/slf4j-setup.gradle"))

dependencies {
    antlr("org.antlr:antlr4:${versions.antlrVersion}")

    implementation("org.slf4j:slf4j-api:${versions.slf4jVersion}")
    implementation("ch.qos.logback:logback-classic:${versions.logbackVersion}")

    testImplementation(platform("org.junit:junit-bom:${versions.junitVersion}"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    testImplementation("org.mockito:mockito-core:${versions.mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${versions.mockitoVersion}")

    testImplementation("org.assertj:assertj-core:${versions.assertjVersion}")
}

tasks.named("test").configure {
    useJUnitPlatform()
}

tasks.named("generateGrammarSource").configure {
    def antlrBaseDirectory = "src/main/antlr";

    // Add a path to the `-lib` option to allow `import` of the same path in
    // grammar file ('.g4').
    arguments += ["-lib", "${antlrBaseDirectory}/com/github/tt4g/learn/antlr".toString()]
    // Specify java package.
    arguments += ["-package", "com.github.tt4g.learn.antlr"]
    // Exclude `*TokenLexer.g4` that is token definition only.
    excludes += "**/*TokenLexer.g4"
    // Since `*TokenLexer.g4` is excluded by `excludes += "**/*TokenLexer.g4"`,
    // it is also excluded from `inputs`.
    // Add all files to `inputs` so that all grammars will be generated when
    // `*TokenLexer.g4` is modified.
    inputs.files(fileTree(antlrBaseDirectory))
}
